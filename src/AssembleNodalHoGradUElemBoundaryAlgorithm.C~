/*------------------------------------------------------------------------*/
/*                 Copyright 2013, 2014 Sandia Corporation.               */
/*  Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive   */
/*  license for use of this work by or on behalf of the U.S. Government.  */
/*  Export of this program may require  license from the                  */
/*  United States Government.                                             */
/*------------------------------------------------------------------------*/

// nalu
#include <AssembleNodalHoGradElemBoundaryAlgorithm.h>
#include <EquationSystem.h>
#include <FieldTypeDef.h>
#include <LinearSystem.h>
#include <Realm.h>
#include <TimeIntegrator.h>
#include <master_element/MasterElement.h>

// stk_mesh/base/fem
#include <stk_mesh/base/BulkData.hpp>
#include <stk_mesh/base/Field.hpp>
#include <stk_mesh/base/GetBuckets.hpp>
#include <stk_mesh/base/GetEntities.hpp>
#include <stk_mesh/base/MetaData.hpp>
#include <stk_mesh/base/Part.hpp>

// stk_io
#include <stk_io/StkMeshIoBroker.hpp>

namespace sierra{
namespace nalu{

//==========================================================================
// Class Definition
//==========================================================================
// AssembleNodalHoGradElemBoundaryAlgorithm - Green-Gauss gradient; higher order
//==========================================================================
//--------------------------------------------------------------------------
//-------- constructor -----------------------------------------------------
//--------------------------------------------------------------------------
AssembleNodalHoGradElemBoundaryAlgorithm::AssembleNodalHoGradElemBoundaryAlgorithm(
  Realm &realm,
  stk::mesh::Part *part)
  : Algorithm(realm, part)
{
  // save off fields; for now hard code for turbulent ke
  stk::mesh::MetaData & meta_data = realm_.fixture_->meta_data();
  coordinates_ = meta_data.get_field<VectorFieldType>(stk::topology::NODE_RANK, realm_.get_coordinates_name());
  scalarQ_ = meta_data.get_field<ScalarFieldType>(stk::topology::NODE_RANK, "turbulent_ke");
  dqdx_ = meta_data.get_field<VectorFieldType>(stk::topology::NODE_RANK, "dkdx");
  hodqdx_ = meta_data.get_field<VectorFieldType>(stk::topology::NODE_RANK, "hodqdx");
  dualNodalVolume_ = meta_data.get_field<ScalarFieldType>(stk::topology::NODE_RANK, "dual_nodal_volume");
}

//--------------------------------------------------------------------------
//-------- execute ---------------------------------------------------------
//--------------------------------------------------------------------------
void
AssembleNodalHoGradElemBoundaryAlgorithm::execute()
{

  stk::mesh::BulkData & bulk_data = realm_.fixture_->bulk_data();
  stk::mesh::MetaData & meta_data = realm_.fixture_->meta_data();

  const int nDim = meta_data.spatial_dimension();

  // extract fields
  GenericFieldType *exposedAreaVec = meta_data.get_field<GenericFieldType>(meta_data.side_rank(), "exposed_area_vector");

  // extract user advection options (allow to potentially change over time)

  // extract user advection options (allow to potentially change over time)
  const double alpha = 0.5;
  
  // one minus flavor..
  const double om_alpha = 1.0-alpha;
  
  // ip values; only boundary
  std::vector<double> coordBip(nDim);

  // pointers to fixed values
  double *p_coordBip = &coordBip[0];

  // nodal fields to gather
  std::vector<double> ws_scalarQ;
  std::vector<double> ws_dualVolume;
  std::vector<double> ws_coordinates;
  std::vector<double> ws_dqdx;

  // master element
  std::vector<double> ws_shape_function;

  // define vector of parent topos; should always be UNITY in size
  std::vector<stk::topology> parentTopo;

  // define some common selectors
  stk::mesh::Selector s_locally_owned_union = meta_data.locally_owned_part()
    &stk::mesh::selectUnion(partVec_);

  stk::mesh::BucketVector const& face_buckets =
    realm_.get_buckets( meta_data.side_rank(), s_locally_owned_union );
  for ( stk::mesh::BucketVector::const_iterator ib = face_buckets.begin();
        ib != face_buckets.end() ; ++ib ) {
    stk::mesh::Bucket & b = **ib ;

    // extract master element
    MasterElement *meFC = realm_.get_surface_master_element(b.topology());

    // extract master element specifics
    const int nodesPerFace = meFC->nodesPerElement_;
    const int numScsIp = meFC->numIntPoints_;

    // algorithm related
    ws_coordinates.resize(nodesPerFace*nDim);
    ws_scalarQ.resize(nodesPerFace);
    ws_dqdx.resize(nodesPerFace*nDim);
    ws_shape_function.resize(numScsIp*nodesPerFace);

    // pointers
    double *p_coordinates = &ws_coordinates[0];
    double *p_scalarQ = &ws_scalarQ[0];
    double *p_dqdx = &ws_dqdx[0];
    double *p_shape_function = &ws_shape_function[0];

    // shape functions
    meFC->shape_fcn(&p_shape_function[0]);

    const stk::mesh::Bucket::size_type length   = b.size();

    for ( stk::mesh::Bucket::size_type k = 0 ; k < length ; ++k ) {

      stk::mesh::Entity face = b[k];

      // face data
      const double * areaVec = stk::mesh::field_data(*exposedAreaVec, b, k);

      //======================================
      // gather nodal data off of face
      //======================================
      stk::mesh::Entity const * face_node_rels = bulk_data.begin_nodes(face);
      int num_face_nodes = bulk_data.num_nodes(face);
      // sanity check on num nodes
      ThrowAssert( num_face_nodes == nodesPerFace );
      for ( int ni = 0; ni < num_face_nodes; ++ni ) {
        stk::mesh::Entity node = face_node_rels[ni];

        // gather scalars
        p_scalarQ[ni] = *stk::mesh::field_data(*scalarQ_, node);

        // gather vectors
        double * coords = stk::mesh::field_data(*coordinates_, node);
        double * dqdx = stk::mesh::field_data(*dqdx_, node);
        const int offSet = ni*nDim;
        for ( int i=0; i < nDim; ++i ) {
          p_dqdx[offSet+i] = dqdx[i];
          p_coordinates[offSet+i] = coords[i];
        }
      }

      // start the assembly
      for ( int ip = 0; ip < numScsIp; ++ip ) {

        // nearest node
        const int nn = ip;

        stk::mesh::Entity nodeNN = face_node_rels[nn];

        // pointer to fields to assemble
        double *hoGradQNN = stk::mesh::field_data(*hodqdx_, nodeNN);

        // suplemental
        double volNN = *stk::mesh::field_data(*dualNodalVolume_, nodeNN);

        // zero out vector quantities
        for ( int j = 0; j < nDim; ++j ) {
          p_coordBip[j] = 0.0;
        }

        // interpolate to scs point; operate on saved off ws_field
        double qIp = 0.0;
        const int offSetSF = ip*nodesPerFace;
        for ( int ic = 0; ic < nodesPerFace; ++ic ) {
          const double r = p_shape_function[offSetSF+ic];
          qIp += r*p_scalarQ[ic];
          const int offSet = ic*nDim;
          for ( int j = 0; j < nDim; ++j ) {
            p_coordBip[j] += r*p_coordinates[offSet+j];
          }
        }
	
        // nearest node
        const double *coordR     =  stk::mesh::field_data(*coordinates_, nodeNN);
        const double *dqdxR      =  stk::mesh::field_data(*dqdx_, nodeNN);
        const double scalarQR    =  *stk::mesh::field_data(*scalarQ_, nodeNN);

        // right extrapolation
        double dqR = 0.0;
        for ( int i = 0; i < nDim; ++i ) {
          const double dx_bip = coordBip[i] - coordR[i];
          dqR += dx_bip*dqdxR[i];
        }
        const double qIpR = scalarQR + dqR;

        // generalized
        const double qHatR = alpha*qIpR + om_alpha*qIp;
        const double qCds = qHatR;

        // nearest node volume
        double inv_volNN = 1.0/volNN;

        // assemble to nearest node
        for ( int j = 0; j < nDim; ++j ) {
          double fac = qCds*areaVec[ip*nDim+j];
          hoGradQNN[j] += fac*inv_volNN;
        }
      }
    }
  }
}

} // namespace nalu
} // namespace Sierra
